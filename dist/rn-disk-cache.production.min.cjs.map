{"version":3,"file":"rn-disk-cache.production.min.cjs","sources":["../src/index.ts"],"sourcesContent":["import { join } from 'path';\nimport fs from 'react-native-fs';\nconst {\n  DocumentDirectoryPath,\n  mkdir,\n  readDir,\n  readFile,\n  unlink,\n  writeFile,\n} = fs;\n\n/**\n * The directory where caches will be stored.\n */\nconst CACHE_DIR = join(DocumentDirectoryPath, '__caches__');\n\n/**\n * Cache an object on the filesystem for a given amount of time.\n *\n * @param name A tag that will be used to name the temp directory.\n * @param fn A function that returns, or Promise that resolves to, the object to\n * cache.\n * @param seconds The number of seconds to cache the object for.\n */\nexport const fromDiskCache = async <T>(\n  name: string,\n  fn: () => T | Promise<T>,\n  seconds = 60 * 60\n): Promise<T> => {\n  /**\n   * The path to this cache, i.e. ${CACHE_DIR}/myCache. Create it if it doesn't\n   * exist.\n   */\n  const cachePath = join(CACHE_DIR, name);\n  await mkdir(cachePath);\n  /**\n   * Available caches in this store.\n   */\n  const caches = await readDir(cachePath);\n  /**\n   * The most recent available cached value.\n   */\n  const mostRecentCache = caches.sort()[caches.length - 1];\n  /**\n   * The timestamp for the most recent cached value.\n   */\n  const mostRecentTimestamp = !mostRecentCache\n    ? 0\n    : Number(mostRecentCache.name);\n  /**\n   * Read the most recent cached value.\n   */\n  const readCache = async () => {\n    console.log('Reading most recent cache value.');\n    const cacheFile = join(cachePath, mostRecentCache.name);\n    const cacheValue = JSON.parse(await readFile(cacheFile));\n    return cacheValue;\n  };\n  /**\n   * Write the new value to the cache.\n   */\n  const writeCache = async () => {\n    console.log('Writing new cache value.');\n    const cacheValue = await fn();\n    const cacheTimestamp = Date.now();\n    const cacheFile = join(cachePath, `${cacheTimestamp}`);\n    const serialized = JSON.stringify(cacheValue);\n    /**\n     * Delete all existing caches.\n     */\n    console.log('Deleting existing caches.');\n    for (const cache of caches) {\n      unlink(cache.path);\n    }\n    /**\n     * Write new cache and return.\n     */\n    await writeFile(cacheFile, serialized);\n    return cacheValue;\n  };\n  /**\n   * If no caches were found, write a new value.\n   */\n  if (!caches.length) {\n    console.log('No caches found.');\n    return await writeCache();\n  }\n  /**\n   * If caches were found, determine if they're stale.\n   */\n  const secondsOld = (Date.now() - mostRecentTimestamp) / 1000;\n  const cacheIsStale = secondsOld >= seconds;\n  console.log(`Caches found for store: ${name}`, { cacheIsStale, secondsOld });\n  /**\n   * If the cache is not stale, read the value and return it.\n   */\n  if (cacheIsStale) {\n    console.log('Cache is stale.');\n    return await writeCache();\n  } else {\n    console.log('Cache is not stale.');\n    return await readCache();\n  }\n};\n"],"names":["DocumentDirectoryPath","mkdir","readDir","readFile","unlink","writeFile","fs","CACHE_DIR","join","async","name","fn","seconds","cachePath","caches","mostRecentCache","sort","length","mostRecentTimestamp","Number","writeCache","console","log","cacheValue","cacheTimestamp","Date","now","cacheFile","serialized","JSON","stringify","cache","path","secondsOld","cacheIsStale","parse","readCache"],"mappings":"wMAEA,MAAMA,sBACJA,EAAqBC,MACrBA,EAAKC,QACLA,EAAOC,SACPA,EAAQC,OACRA,EAAMC,UACNA,GACEC,UAKEC,EAAYC,OAAKR,EAAuB,oCAUjBS,MAC3BC,EACAC,EACAC,EAAU,QAMV,MAAMC,EAAYL,OAAKD,EAAWG,SAC5BT,EAAMY,GAIZ,MAAMC,QAAeZ,EAAQW,GAIvBE,EAAkBD,EAAOE,OAAOF,EAAOG,OAAS,GAIhDC,EAAuBH,EAEzBI,OAAOJ,EAAgBL,MADvB,EAcEU,EAAaX,UACjBY,QAAQC,IAAI,4BACZ,MAAMC,QAAmBZ,IACnBa,EAAiBC,KAAKC,MACtBC,EAAYnB,OAAKK,EAAW,GAAGW,KAC/BI,EAAaC,KAAKC,UAAUP,GAIlCF,QAAQC,IAAI,6BACZ,IAAK,MAAMS,KAASjB,EAClBV,EAAO2B,EAAMC,MAMf,aADM3B,EAAUsB,EAAWC,GACpBL,GAKT,IAAKT,EAAOG,OAEV,OADAI,QAAQC,IAAI,0BACCF,IAKf,MAAMa,GAAcR,KAAKC,MAAQR,GAAuB,IAClDgB,EAAeD,GAAcrB,EAKnC,OAJAS,QAAQC,IAAI,2BAA2BZ,IAAQ,CAAEwB,aAAAA,EAAcD,WAAAA,IAI3DC,GACFb,QAAQC,IAAI,yBACCF,MAEbC,QAAQC,IAAI,4BAhDIb,WAChBY,QAAQC,IAAI,oCACZ,MAAMK,EAAYnB,OAAKK,EAAWE,EAAgBL,MAElD,OADmBmB,KAAKM,YAAYhC,EAASwB,KA8ChCS"}