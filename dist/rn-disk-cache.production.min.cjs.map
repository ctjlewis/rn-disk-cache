{"version":3,"file":"rn-disk-cache.production.min.cjs","sources":["../src/CacheStore.ts","../src/index.ts"],"sourcesContent":["/**\n * @fileoverview\n * This file uses a class, which is a highly unpopular pattern nowadays, but was\n * necessary to avoid argument juggling between functions.\n */\n\nimport { join } from 'path';\nimport fs from 'react-native-fs';\n\nconst {\n  DocumentDirectoryPath,\n  mkdir,\n  readDir,\n  readFile,\n  unlink,\n  writeFile,\n} = fs;\n\ntype Cache = fs.ReadDirItem;\n\n/**\n * The directory where caches will be stored.\n */\nconst CACHE_DIR = join(DocumentDirectoryPath, '__caches__');\n\nexport class CacheStore<T> {\n  /**\n   * The path to this cache at ${CACHE_DIR}/{name}.\n   */\n  private cachePath: string;\n  /**\n   * Set the cache directory for this store.\n   */\n  constructor(public name: string) {\n    this.cachePath = join(CACHE_DIR, this.name);\n  }\n  /**\n   * List all caches in this store.\n   */\n  private getCaches = async (): Promise<Cache[]> => {\n    /**\n     * Make sure this cache directory exists.\n     */\n    await mkdir(this.cachePath);\n    /**\n     * Find available caches and sort them by increasing age.\n     */\n    const cacheResults = await readDir(this.cachePath);\n    return cacheResults.sort(\n      (a, b) => Number(b.name) - Number(a.name)\n    );\n  }\n  /**\n   * Log messages and include the name of the cache.\n   */\n  public log(...msgs: any[]) {\n    console.log(`CACHE [${this.name}]`, ...msgs);\n    return this;\n  }\n  /**\n   * Get the most recent cache \n   */\n  public getMostRecentCache = async (): Promise<Cache> => {\n    const caches = await this.getCaches();\n    return caches[0];\n  };\n  /**\n   * Read the most recent cached value.\n   */\n  public read = async () => {\n    this.log('Reading most recent cache value.');\n    try {\n      const mostRecentCache = await this.getMostRecentCache();\n      this.log(mostRecentCache.path);\n      const fileContents = await readFile(mostRecentCache.path);\n      const cacheValue = JSON.parse(fileContents);\n\n      return cacheValue;\n    } catch (error) {\n      this.log('Error reading file', error);\n    }\n  };\n  /**\n   * Write the new value to the cache.\n   */\n  public write = async (cacheValue: T) => {\n    this.log('Writing new cache value.');\n    const cacheFile = join(this.cachePath, `${Date.now()}`);\n    /**\n     * Delete all except the most recent cache.\n     */\n    await this.deleteCaches(false);\n    /**\n     * Write new cache and return.\n     */\n    const serialized = JSON.stringify(cacheValue);\n    await writeFile(cacheFile, serialized);\n    return cacheValue;\n  };\n  /**\n   * Delete all caches except the most recent, unless `clean: true` is\n   * specified, in which case all caches will be deleted.\n   */\n  public deleteCaches = async (clean: boolean) => {\n    this.log(`Deleting ${clean ? 'all' : 'old'} caches.`);\n    const caches = await this.getCaches();\n    const cachesToDelete = clean ? caches : caches.slice(1);\n    await Promise.all(\n      cachesToDelete.map(\n        async (cache) => await unlink(cache.path)\n      )\n    );\n  }\n}","import { CacheStore } from './CacheStore';\n\n/**\n * Cache an object on the filesystem for a given amount of time.\n *\n * @param name A tag that will be used to name the temp directory.\n * @param fn A function that returns, or Promise that resolves to, the object to\n * cache.\n * @param seconds The number of seconds to cache the object for.\n * @param args Passed to the async function via `await fn(...args)`.\n */\nexport const fromDiskCache = async <T>(\n  name: string,\n  fn: () => T | Promise<T>,\n  seconds = 60 * 60,\n  ...args: []\n): Promise<T> => {\n  /**\n   * The time the function started executing.\n   */\n  const startTime = Date.now();\n  const cacheStore = new CacheStore<T>(name);\n  /**\n   * Await and write the new value.\n   */\n  const updateStore = async () => {\n    const newValue = await fn(...args);\n    return await cacheStore.write(newValue);\n  };\n  /**\n   * Try to read from available caches. Clear all caches if an error is\n   * encountered.\n   */\n  try {\n    const mostRecentCache = await cacheStore.getMostRecentCache();\n    const mostRecentTimestamp = !mostRecentCache\n      ? 0\n      : Number(mostRecentCache.name);\n    /**\n     * If no caches were found, write a new value.\n     */\n    if (!mostRecentCache) {\n      cacheStore.log('No caches found.');\n      return await updateStore();\n    }\n    /**\n     * If caches were found, determine if they're stale.\n     */\n    const secondsOld = (Date.now() - mostRecentTimestamp) / 1000;\n    const cacheIsStale = secondsOld >= seconds;\n    cacheStore.log(`Caches found for store: ${name}`, { cacheIsStale, secondsOld });\n    /**\n     * If the cache is not stale, read the value and return it.\n     */\n    if (cacheIsStale) {\n      cacheStore.log('Cache is stale.');\n      return await updateStore();\n    } else {\n      cacheStore.log('Cache is not stale.');\n      return await cacheStore.read();\n    }\n  } catch (error) {\n    cacheStore.log(\n      `Unrecoverable error. Files may be corrupted. Deleting all caches.`,\n      error\n    );\n    await cacheStore.deleteCaches(true);\n    throw new Error(`Error: ${error}`);\n  } finally {\n    cacheStore.log(`Finished in ${Date.now() - startTime}ms`);\n  }\n};\n"],"names":["DocumentDirectoryPath","mkdir","readDir","readFile","unlink","writeFile","fs","CACHE_DIR","join","CacheStore","name","cachePath","constructor","this","getCaches","async","sort","a","b","Number","log","msgs","console","getMostRecentCache","read","mostRecentCache","path","fileContents","JSON","parse","error","write","cacheValue","cacheFile","Date","now","deleteCaches","serialized","stringify","clean","caches","cachesToDelete","slice","Promise","all","map","cache","fn","seconds","args","startTime","cacheStore","updateStore","newValue","mostRecentTimestamp","secondsOld","cacheIsStale","Error"],"mappings":"wMASA,MAAMA,sBACJA,EAAqBC,MACrBA,EAAKC,QACLA,EAAOC,SACPA,EAAQC,OACRA,EAAMC,UACNA,GACEC,UAOEC,EAAYC,OAAKR,EAAuB,oBAEjCS,EAQQC,KAJXC,UAIRC,YAAmBF,GAAAG,UAAAH,EACjBG,KAAKF,UAAYH,OAAKD,EAAWM,KAAKH,MAKhCI,UAAYC,gBAIZd,EAAMY,KAAKF,kBAIUT,EAAQW,KAAKF,YACpBK,MAClB,CAACC,EAAGC,IAAMC,OAAOD,EAAER,MAAQS,OAAOF,EAAEP,SAMjCU,OAAOC,GAEZ,OADAC,QAAQF,IAAI,UAAUP,KAAKH,WAAYW,GAChCR,KAKFU,mBAAqBR,gBACLF,KAAKC,aACZ,GAKTU,KAAOT,UACZF,KAAKO,IAAI,oCACT,IACE,MAAMK,QAAwBZ,KAAKU,qBACnCV,KAAKO,IAAIK,EAAgBC,MACzB,MAAMC,QAAqBxB,EAASsB,EAAgBC,MAGpD,OAFmBE,KAAKC,MAAMF,GAG9B,MAAOG,GACPjB,KAAKO,IAAI,qBAAsBU,KAM5BC,MAAQhB,MAAOiB,IACpBnB,KAAKO,IAAI,4BACT,MAAMa,EAAYzB,OAAKK,KAAKF,UAAW,GAAGuB,KAAKC,eAIzCtB,KAAKuB,cAAa,GAIxB,MAAMC,EAAaT,KAAKU,UAAUN,GAElC,aADM3B,EAAU4B,EAAWI,GACpBL,GAMFI,aAAerB,MAAOwB,IAC3B1B,KAAKO,IAAI,YAAYmB,EAAQ,MAAQ,iBACrC,MAAMC,QAAe3B,KAAKC,YACpB2B,EAAiBF,EAAQC,EAASA,EAAOE,MAAM,SAC/CC,QAAQC,IACZH,EAAeI,KACb9B,MAAO+B,SAAgB1C,EAAO0C,EAAMpB,gCClGfX,MAC3BL,EACAqC,EACAC,EAAU,QACPC,KAKH,MAAMC,EAAYhB,KAAKC,MACjBgB,EAAa,IAAI1C,EAAcC,GAI/B0C,EAAcrC,UAClB,MAAMsC,QAAiBN,KAAME,GAC7B,aAAaE,EAAWpB,MAAMsB,IAMhC,IACE,MAAM5B,QAAwB0B,EAAW5B,qBACnC+B,EAAuB7B,EAEzBN,OAAOM,EAAgBf,MADvB,EAKJ,IAAKe,EAEH,OADA0B,EAAW/B,IAAI,0BACFgC,IAKf,MAAMG,GAAcrB,KAAKC,MAAQmB,GAAuB,IAClDE,EAAeD,GAAcP,EAKnC,OAJAG,EAAW/B,IAAI,2BAA2BV,IAAQ,CAAE8C,aAAAA,EAAcD,WAAAA,IAI9DC,GACFL,EAAW/B,IAAI,yBACFgC,MAEbD,EAAW/B,IAAI,6BACF+B,EAAW3B,QAE1B,MAAOM,GAMP,MALAqB,EAAW/B,IACT,oEACAU,SAEIqB,EAAWf,cAAa,GACxB,IAAIqB,MAAM,UAAU3B,aAE1BqB,EAAW/B,IAAI,eAAec,KAAKC,MAAQe"}