{"version":3,"file":"rn-disk-cache.production.min.cjs","sources":["../src/CacheStore.ts","../src/index.ts"],"sourcesContent":["/**\n * @fileoverview\n * This file uses a class, which is a highly unpopular pattern nowadays, but was\n * necessary to avoid argument juggling between functions, and overall easier\n * state management.\n */\n\nimport { join } from 'path';\nimport fs from 'react-native-fs';\n\nconst {\n  DocumentDirectoryPath,\n  mkdir,\n  readDir,\n  readFile,\n  unlink,\n  writeFile,\n} = fs;\n\n/**\n * The directory where caches will be stored.\n */\nconst CACHE_DIR = join(DocumentDirectoryPath, '__caches__');\n\nexport class CacheStore<T> {\n  /**\n   * The path to this cache at ${CACHE_DIR}/{name}.\n   */\n  private cachePath: string;\n  /**\n   *  The path to the lockfile for this store.\n   */\n  private lockFile: string;\n  /**\n   * Set the cache directory for this store.\n   */\n  constructor(\n    private name: string,\n    private maxAge: number,\n    private silent = false\n  ) {\n    this.cachePath = join(CACHE_DIR, this.name);\n    this.lockFile = join(this.cachePath, '.lock');\n  }\n  /**\n   * Log messages and include the name of the cache.\n   */\n  private log(...msgs: any[]) {\n    if (!this.silent) {\n      console.log(`CACHE [${this.name}]`, ...msgs);\n    }\n  }\n  /**\n   * Write the lockfile.\n   */\n  private async lock() {\n    this.log('Locking cache store.');\n    return await fs.writeFile(this.lockFile, '');\n  }\n  /**\n   * Delete the lockfile.\n   */\n  private async unlock() {\n    this.log('Unlocking cache store.')\n    return await fs.unlink(this.lockFile);\n  }\n  /**\n   * Check if the lockfile exists.\n   */\n  private async isLocked() {\n    return await fs.exists(this.lockFile);\n  }\n  /**\n   * Returns a Promise that resolves when the lockfile is deleted.\n   */\n  private async waitForUnlock() {\n    this.log('Waiting for unlock...');\n    return await new Promise((resolve) => {\n      const checkForUnlock = async () => {\n        if (!(await this.isLocked())) {\n          resolve(true);\n        } else {\n          setTimeout(checkForUnlock, 100 * Math.random());\n        }\n      }\n    });\n  }\n  /**\n   * Ensure the cachePath exists, and return any caches inside of it, sorted by\n   * increasing age.\n   */\n  private async getCaches() {\n    /**\n     * Make sure this cache directory exists.\n     */\n    await mkdir(this.cachePath);\n    /**\n     * Find available caches and sort them by increasing age.\n     */\n    const cachesInDir = await readDir(this.cachePath);\n    const sortedCaches =\n      cachesInDir\n        .filter((f) => Number(f.name) !== NaN)\n        .sort((a, b) => Number(b.name) - Number(a.name));\n\n    return sortedCaches;\n  }\n  /**\n   * Return the most recent valid cache where `age < maxAge`, else `null`.\n   */\n  private async getValidCache() {\n    this.log('Reading most recent cache value.');\n\n    const caches = await this.getCaches();\n    const mostRecentCache = caches[0];\n\n    if (!mostRecentCache) {\n      this.log('No caches found.');\n      return null;\n    }\n\n    const mostRecentCacheTimestamp = Number(mostRecentCache.name);\n    const mostRecentCacheAge = (Date.now() - mostRecentCacheTimestamp) / 1000;\n    const mostRecentCacheIsStale = mostRecentCacheAge >= this.maxAge;\n\n    this.log(`Cache found. Age: ${mostRecentCacheAge} sec`);\n\n    if (!mostRecentCacheIsStale) {\n      return mostRecentCache;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Delete all caches except the most recent, unless `all: true` is\n   * specified, in which case all caches will be deleted.\n   */\n   private async clean(all: boolean) {\n    this.log(`Deleting ${all ? 'all' : 'old'} caches.`);\n\n    const caches = await this.getCaches();\n    const cachesToDelete = all ? caches : caches.slice(1);\n    await Promise.all(\n      cachesToDelete.map(\n        async (cache) => await unlink(cache.path)\n      )\n    );\n  }\n  /**\n   * Try to read the most recent valid cache. Return `null` if none found.\n   */\n  private async read() {\n    const cache = await this.getValidCache();\n    if (cache) {\n      this.log('Valid cache found.');\n      const fileContents = await readFile(cache.path);\n      const value: T = JSON.parse(fileContents);\n      /**\n       * Return as an object to prevent issues if the cached value happened to be\n       * `null`.\n       */\n      return { value };\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Write the new value to the cache.\n   */\n  private async write(value: T) {\n    /**\n     * If there's a valid cache, bail out and return that.\n     */\n    const cacheValue = await this.read();\n    if (cacheValue) {\n      this.log('Valid cache found while trying to write. Using that instead.');\n      return cacheValue;\n    } else {\n      /**\n       * Wait for unlock, then resume.\n       */\n      await this.waitForUnlock();\n      this.log('Writing new cache value.');\n\n      /**\n       * Delete all except the most recent cache and set the lockfile.\n       */\n      await this.lock();\n      await this.clean(false);\n      /**\n       * Write new cache and unlock the directory.\n       */\n      const file = join(this.cachePath, `${Date.now()}`);\n      const serialized = JSON.stringify(value);\n      await writeFile(file, serialized);\n      await this.unlock();\n\n      return { value };\n    }\n  }\n  /**\n   * Try to read a non-stale cache, and if one doesn't exist, load a new one,\n   * cache it, and return it.\n   *\n   * This is delayed by a random amount of time, up to 100ms, to support\n   * concurrency.\n   */\n  public async poll(\n    fn: (...args: any[]) => T | Promise<T>,\n    ...args: any[]\n  ) {\n    /**\n     * The time the function started executing.\n     */\n    const startTime = Date.now();\n    try {\n      const cacheValue = await this.read();\n      if (cacheValue) {\n        const { value } = cacheValue;\n        return value;\n      } else {\n        const { value } = await this.write(await fn(...args));\n        return value;\n      }\n    } catch (error) {\n      this.log(\n        `Unrecoverable error. Files may be corrupted. Deleting all caches.`,\n        error\n      );\n\n      await this.clean(true);\n      throw new Error(`Error: ${error}`);\n    } finally {\n      this.log(`Finished in ${Date.now() - startTime}ms`);\n    }\n  }\n}","import { CacheStore } from './CacheStore';\n\ninterface FromDiskCacheArgs<T>{\n  name: string;\n  poll: (...args: any[]) => T | Promise<T>;\n  maxAge?: number;\n  silent?: boolean;\n}\n\n/**\n * Cache an object on the filesystem, given a `name`, `refresh` (can be async),\n * and `maxAge` (defaults to 1hr).\n *\n * Pass `silent: true` to disable logs.\n */\nexport const fromDiskCache = async <T>(\n  {\n    name,\n    poll: refresh,\n    maxAge = 60 * 60,\n    silent = false,\n  }: FromDiskCacheArgs<T>,\n  ...args: any[]\n): Promise<T> => {\n  /**\n   * Initialize a reference to this cache store.\n   */\n  const cacheStore = new CacheStore<T>(name, maxAge, silent);\n  /**\n   * Read a cached version of the value, or write a new one if it doesn't exist\n   * and return that.\n   */\n  try {\n    return await cacheStore.poll(refresh, ...args);\n  } catch (error) {\n    throw new Error(`Error refreshing cache: ${error}`);\n  }\n};"],"names":["DocumentDirectoryPath","mkdir","readDir","readFile","unlink","writeFile","fs","CACHE_DIR","join","CacheStore","name","maxAge","silent","cachePath","lockFile","constructor","this","log","msgs","console","lock","unlock","isLocked","exists","waitForUnlock","Promise","resolve","getCaches","filter","f","NaN","Number","sort","a","b","getValidCache","mostRecentCache","mostRecentCacheTimestamp","mostRecentCacheAge","Date","now","mostRecentCacheIsStale","clean","all","caches","cachesToDelete","slice","map","async","cache","path","read","fileContents","value","JSON","parse","write","cacheValue","file","serialized","stringify","poll","fn","args","startTime","error","Error","refresh","cacheStore"],"mappings":"wMAUA,MAAMA,sBACJA,EAAqBC,MACrBA,EAAKC,QACLA,EAAOC,SACPA,EAAQC,OACRA,EAAMC,UACNA,GACEC,UAKEC,EAAYC,OAAKR,EAAuB,oBAEjCS,EAaDC,KACAC,OACAC,OAXFC,UAIAC,SAIRC,YACUL,EACAC,EACAC,GAAS,GAFTI,UAAAN,EACAM,YAAAL,EACAK,YAAAJ,EAERI,KAAKH,UAAYL,OAAKD,EAAWS,KAAKN,MACtCM,KAAKF,SAAWN,OAAKQ,KAAKH,UAAW,SAK/BI,OAAOC,GACRF,KAAKJ,QACRO,QAAQF,IAAI,UAAUD,KAAKN,WAAYQ,GAMnCE,aAEN,OADAJ,KAAKC,IAAI,8BACIX,UAAGD,UAAUW,KAAKF,SAAU,IAKnCO,eAEN,OADAL,KAAKC,IAAI,gCACIX,UAAGF,OAAOY,KAAKF,UAKtBQ,iBACN,aAAahB,UAAGiB,OAAOP,KAAKF,UAKtBU,sBAEN,OADAR,KAAKC,IAAI,+BACI,IAAIQ,SAASC,QAcpBC,kBAcN,aAVM1B,EAAMe,KAAKH,kBAISX,EAAQc,KAAKH,YAGlCe,QAAQC,GAAyBC,MAAnBC,OAAOF,EAAEnB,QACvBsB,MAAK,CAACC,EAAGC,IAAMH,OAAOG,EAAExB,MAAQqB,OAAOE,EAAEvB,QAOxCyB,sBACNnB,KAAKC,IAAI,oCAET,MACMmB,SADepB,KAAKW,aACK,GAE/B,IAAKS,EAEH,OADApB,KAAKC,IAAI,oBACF,KAGT,MAAMoB,EAA2BN,OAAOK,EAAgB1B,MAClD4B,GAAsBC,KAAKC,MAAQH,GAA4B,IAC/DI,EAAyBH,GAAsBtB,KAAKL,OAI1D,OAFAK,KAAKC,IAAI,qBAAqBqB,SAEzBG,EAGI,KAFAL,EASFM,YAAYC,GACnB3B,KAAKC,IAAI,YAAY0B,EAAM,MAAQ,iBAEnC,MAAMC,QAAe5B,KAAKW,YACpBkB,EAAiBF,EAAMC,EAASA,EAAOE,MAAM,SAC7CrB,QAAQkB,IACZE,EAAeE,KACbC,MAAOC,SAAgB7C,EAAO6C,EAAMC,SAOlCC,aACN,MAAMF,QAAcjC,KAAKmB,gBACzB,GAAIc,EAAO,CACTjC,KAAKC,IAAI,sBACT,MAAMmC,QAAqBjD,EAAS8C,EAAMC,MAM1C,MAAO,CAAEG,MALQC,KAAKC,MAAMH,IAO5B,OAAO,KAMHI,YAAYH,GAIlB,MAAMI,QAAmBzC,KAAKmC,OAC9B,GAAIM,EAEF,OADAzC,KAAKC,IAAI,gEACFwC,EACF,OAICzC,KAAKQ,gBACXR,KAAKC,IAAI,kCAKHD,KAAKI,aACLJ,KAAK0B,OAAM,GAIjB,MAAMgB,EAAOlD,OAAKQ,KAAKH,UAAW,GAAG0B,KAAKC,SACpCmB,EAAaL,KAAKM,UAAUP,GAIlC,aAHMhD,EAAUqD,EAAMC,SAChB3C,KAAKK,SAEJ,CAAEgC,MAAAA,IAUNQ,WACLC,KACGC,GAKH,MAAMC,EAAYzB,KAAKC,MACvB,IACE,MAAMiB,QAAmBzC,KAAKmC,OAC9B,GAAIM,EAAY,CACd,MAAMJ,MAAEA,GAAUI,EAClB,OAAOJ,EACF,CACL,MAAMA,MAAEA,SAAgBrC,KAAKwC,YAAYM,KAAMC,IAC/C,OAAOV,GAET,MAAOY,GAOP,MANAjD,KAAKC,IACH,oEACAgD,SAGIjD,KAAK0B,OAAM,GACX,IAAIwB,MAAM,UAAUD,aAE1BjD,KAAKC,IAAI,eAAesB,KAAKC,MAAQwB,+BC1NdhB,OAEzBtC,KAAAA,EACAmD,KAAMM,EACNxD,OAAAA,EAAS,KACTC,OAAAA,GAAS,MAERmD,KAKH,MAAMK,EAAa,IAAI3D,EAAcC,EAAMC,EAAQC,GAKnD,IACE,aAAawD,EAAWP,KAAKM,KAAYJ,GACzC,MAAOE,GACP,MAAM,IAAIC,MAAM,2BAA2BD"}