{"version":3,"file":"rn-disk-cache.production.min.cjs","sources":["../src/CacheStore.ts","../src/index.ts"],"sourcesContent":["/**\n * @fileoverview\n * This file uses a class, which is a highly unpopular pattern nowadays, but was\n * necessary to avoid argument juggling between functions.\n */\n\nimport { join } from 'path';\nimport fs from 'react-native-fs';\n\nconst {\n  DocumentDirectoryPath,\n  mkdir,\n  readDir,\n  readFile,\n  unlink,\n  writeFile,\n} = fs;\n\ntype Cache = fs.ReadDirItem;\n\n/**\n * The directory where caches will be stored.\n */\nconst CACHE_DIR = join(DocumentDirectoryPath, '__caches__');\n\nexport class CacheStore<T> {\n  /**\n   * The path to this cache at ${CACHE_DIR}/{name}.\n   */\n  private cachePath: string;\n  /**\n   * Set the cache directory for this store.\n   */\n  constructor(public name: string) {\n    this.cachePath = join(CACHE_DIR, this.name);\n  }\n  /**\n   * List all caches in this store.\n   */\n  private getCaches = async (): Promise<Cache[]> => {\n    /**\n     * Make sure this cache directory exists.\n     */\n    await mkdir(this.cachePath);\n    /**\n     * Find available caches and sort them by increasing age.\n     */\n    const cacheResults = await readDir(this.cachePath);\n    return cacheResults.sort(\n      (a, b) => Number(b.name) - Number(a.name)\n    );\n  }\n  /**\n   * Get the most recent cache \n   */\n  public getMostRecentCache = async (): Promise<Cache> => {\n    const caches = await this.getCaches();\n    return caches[0];\n  };\n  /**\n   * Read the most recent cached value.\n   */\n  public read = async () => {\n    console.log('Reading most recent cache value.');\n    const mostRecentCache = await this.getMostRecentCache();\n    const fileContents = await readFile(mostRecentCache.name);\n    const cacheValue = JSON.parse(fileContents);\n    return cacheValue;\n  };\n  /**\n   * Write the new value to the cache.\n   */\n  public write = async (cacheValue: T) => {\n    console.log('Writing new cache value.');\n    const cacheFile = join(this.cachePath, `${Date.now()}`);\n    /**\n     * Delete all except the most recent cache.\n     */\n    await this.deleteCaches(false);\n    /**\n     * Write new cache and return.\n     */\n    const serialized = JSON.stringify(cacheValue);\n    await writeFile(cacheFile, serialized);\n    return cacheValue;\n  };\n  /**\n   * Delete all caches except the most recent, unless `clean: true` is\n   * specified, in which case all caches will be deleted.\n   */\n  public deleteCaches = async (clean: boolean) => {\n    console.log(`Deleting ${clean ? 'all' : 'old'} caches.`);\n    const caches = await this.getCaches();\n    const cachesToDelete = clean ? caches : caches.slice(1);\n    await Promise.all(\n      cachesToDelete.map(\n        async (cache) => await unlink(cache.path)\n      )\n    );\n  }\n}","import { CacheStore } from './CacheStore';\n\n/**\n * Cache an object on the filesystem for a given amount of time.\n *\n * @param name A tag that will be used to name the temp directory.\n * @param fn A function that returns, or Promise that resolves to, the object to\n * cache.\n * @param seconds The number of seconds to cache the object for.\n * @param args Passed to the async function via `await fn(...args)`.\n */\nexport const fromDiskCache = async <T>(\n  name: string,\n  fn: () => T | Promise<T>,\n  seconds = 60 * 60,\n  ...args: []\n): Promise<T> => {\n  /**\n   * The time the function started executing.\n   */\n  const startTime = Date.now();\n  const cacheStore = new CacheStore<T>(name);\n  /**\n   * Await and write the new value.\n   */\n  const updateStore = async () => {\n    const newValue = await fn(...args);\n    return await cacheStore.write(newValue);\n  };\n  /**\n   * Try to read from available caches. Clear all caches if an error is\n   * encountered.\n   */\n  try {\n    const mostRecentCache = await cacheStore.getMostRecentCache();\n    const mostRecentTimestamp = !mostRecentCache\n      ? 0\n      : Number(mostRecentCache.name);\n    /**\n     * If no caches were found, write a new value.\n     */\n    if (!mostRecentCache) {\n      console.log('No caches found.');\n      return await updateStore();\n    }\n    /**\n     * If caches were found, determine if they're stale.\n     */\n    const secondsOld = (Date.now() - mostRecentTimestamp) / 1000;\n    const cacheIsStale = secondsOld >= seconds;\n    console.log(`Caches found for store: ${name}`, { cacheIsStale, secondsOld });\n    /**\n     * If the cache is not stale, read the value and return it.\n     */\n    if (cacheIsStale) {\n      console.log('Cache is stale.');\n      return await updateStore();\n    } else {\n      console.log('Cache is not stale.');\n      return await cacheStore.read();\n    }\n  } catch (error) {\n    console.log(\n      `Unrecoverable error. Files may be corrupted. Deleting all caches.`\n    );\n    await cacheStore.deleteCaches(true);\n    throw new Error(`Error: ${error}`);\n  } finally {\n    console.log(`Finished in ${Date.now() - startTime}ms`);\n  }\n};\n"],"names":["DocumentDirectoryPath","mkdir","readDir","readFile","unlink","writeFile","fs","CACHE_DIR","join","CacheStore","name","cachePath","constructor","this","getCaches","async","sort","a","b","Number","getMostRecentCache","read","console","log","mostRecentCache","fileContents","JSON","parse","write","cacheValue","cacheFile","Date","now","deleteCaches","serialized","stringify","clean","caches","cachesToDelete","slice","Promise","all","map","cache","path","fn","seconds","args","startTime","cacheStore","updateStore","newValue","mostRecentTimestamp","secondsOld","cacheIsStale","error","Error"],"mappings":"wMASA,MAAMA,sBACJA,EAAqBC,MACrBA,EAAKC,QACLA,EAAOC,SACPA,EAAQC,OACRA,EAAMC,UACNA,GACEC,UAOEC,EAAYC,OAAKR,EAAuB,oBAEjCS,EAQQC,KAJXC,UAIRC,YAAmBF,GAAAG,UAAAH,EACjBG,KAAKF,UAAYH,OAAKD,EAAWM,KAAKH,MAKhCI,UAAYC,gBAIZd,EAAMY,KAAKF,kBAIUT,EAAQW,KAAKF,YACpBK,MAClB,CAACC,EAAGC,IAAMC,OAAOD,EAAER,MAAQS,OAAOF,EAAEP,SAMjCU,mBAAqBL,gBACLF,KAAKC,aACZ,GAKTO,KAAON,UACZO,QAAQC,IAAI,oCACZ,MAAMC,QAAwBX,KAAKO,qBAC7BK,QAAqBtB,EAASqB,EAAgBd,MAEpD,OADmBgB,KAAKC,MAAMF,IAMzBG,MAAQb,MAAOc,IACpBP,QAAQC,IAAI,4BACZ,MAAMO,EAAYtB,OAAKK,KAAKF,UAAW,GAAGoB,KAAKC,eAIzCnB,KAAKoB,cAAa,GAIxB,MAAMC,EAAaR,KAAKS,UAAUN,GAElC,aADMxB,EAAUyB,EAAWI,GACpBL,GAMFI,aAAelB,MAAOqB,IAC3Bd,QAAQC,IAAI,YAAYa,EAAQ,MAAQ,iBACxC,MAAMC,QAAexB,KAAKC,YACpBwB,EAAiBF,EAAQC,EAASA,EAAOE,MAAM,SAC/CC,QAAQC,IACZH,EAAeI,KACb3B,MAAO4B,SAAgBvC,EAAOuC,EAAMC,gCCrFf7B,MAC3BL,EACAmC,EACAC,EAAU,QACPC,KAKH,MAAMC,EAAYjB,KAAKC,MACjBiB,EAAa,IAAIxC,EAAcC,GAI/BwC,EAAcnC,UAClB,MAAMoC,QAAiBN,KAAME,GAC7B,aAAaE,EAAWrB,MAAMuB,IAMhC,IACE,MAAM3B,QAAwByB,EAAW7B,qBACnCgC,EAAuB5B,EAEzBL,OAAOK,EAAgBd,MADvB,EAKJ,IAAKc,EAEH,OADAF,QAAQC,IAAI,0BACC2B,IAKf,MAAMG,GAActB,KAAKC,MAAQoB,GAAuB,IAClDE,EAAeD,GAAcP,EAKnC,OAJAxB,QAAQC,IAAI,2BAA2Bb,IAAQ,CAAE4C,aAAAA,EAAcD,WAAAA,IAI3DC,GACFhC,QAAQC,IAAI,yBACC2B,MAEb5B,QAAQC,IAAI,6BACC0B,EAAW5B,QAE1B,MAAOkC,GAKP,MAJAjC,QAAQC,IACN,2EAEI0B,EAAWhB,cAAa,GACxB,IAAIuB,MAAM,UAAUD,aAE1BjC,QAAQC,IAAI,eAAeQ,KAAKC,MAAQgB"}