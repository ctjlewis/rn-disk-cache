{"version":3,"file":"rn-disk-cache.development.cjs","sources":["../src/index.ts"],"sourcesContent":["import { join } from 'path';\nimport fs from 'react-native-fs';\nconst {\n  DocumentDirectoryPath,\n  mkdir,\n  readDir,\n  readFile,\n  unlink,\n  writeFile,\n} = fs;\n\n/**\n * The directory where caches will be stored.\n */\nconst CACHE_DIR = join(DocumentDirectoryPath, '__caches__');\n\n/**\n * Cache an object on the filesystem for a given amount of time.\n *\n * @param name A tag that will be used to name the temp directory.\n * @param fn A function that returns, or Promise that resolves to, the object to\n * cache.\n * @param seconds The number of seconds to cache the object for.\n */\nexport const fromDiskCache = async <T>(\n  name: string,\n  fn: () => T | Promise<T>,\n  seconds = 60 * 60\n): Promise<T> => {\n  /**\n   * The path to this cache, i.e. ${CACHE_DIR}/myCache. Create it if it doesn't\n   * exist.\n   */\n  const cachePath = join(CACHE_DIR, name);\n  await mkdir(cachePath);\n  /**\n   * Available caches in this store.\n   */\n  const cacheResults = await readDir(cachePath);\n  const caches = cacheResults.sort((a, b) => Number(b.name) - Number(a.name));\n  /**\n   * The most recent available cached value.\n   */\n  const mostRecentCache = caches[0];\n  /**\n   * The timestamp for the most recent cached value.\n   */\n  const mostRecentTimestamp = !mostRecentCache\n    ? 0\n    : Number(mostRecentCache.name);\n  /**\n   * Read the most recent cached value.\n   */\n  const readCache = async () => {\n    console.log('Reading most recent cache value.');\n    const cacheFile = join(cachePath, mostRecentCache.name);\n    const cacheValue = JSON.parse(await readFile(cacheFile));\n    return cacheValue;\n  };\n  /**\n   * Write the new value to the cache.\n   */\n  const writeCache = async () => {\n    console.log('Writing new cache value.');\n    const cacheTimestamp = Date.now();\n    const cacheFile = join(cachePath, `${cacheTimestamp}`);\n    /**\n     * Delete all existing caches.\n     */\n    if (caches.length > 1) {\n      console.log('Deleting old caches.');\n      const cachesToDelete = caches.slice(1);\n      await Promise.all(\n        cachesToDelete.map(\n          async (cache) => await unlink(cache.path)\n        )\n      );\n    }\n    /**\n     * Write new cache and return.\n     */\n    const cacheValue = await fn();\n    const serialized = JSON.stringify(cacheValue);\n    await writeFile(cacheFile, serialized);\n    return cacheValue;\n  };\n  /**\n   * If no caches were found, write a new value.\n   */\n  if (!caches.length) {\n    console.log('No caches found.');\n    return await writeCache();\n  }\n  /**\n   * If caches were found, determine if they're stale.\n   */\n  const secondsOld = (Date.now() - mostRecentTimestamp) / 1000;\n  const cacheIsStale = secondsOld >= seconds;\n  console.log(`Caches found for store: ${name}`, { cacheIsStale, secondsOld });\n  /**\n   * If the cache is not stale, read the value and return it.\n   */\n  if (cacheIsStale) {\n    console.log('Cache is stale.');\n    return await writeCache();\n  } else {\n    console.log('Cache is not stale.');\n    return await readCache();\n  }\n};\n"],"names":["fs","join"],"mappings":";;;;;;;;;;;AAEA,MAAM,EACJ,qBAAqB,EACrB,KAAK,EACL,OAAO,EACP,QAAQ,EACR,MAAM,EACN,SAAS,GACV,GAAGA,sBAAE,CAAC;AAEP;;;AAGA,MAAM,SAAS,GAAGC,SAAI,CAAC,qBAAqB,EAAE,YAAY,CAAC,CAAC;AAE5D;;;;;;;;MAQa,aAAa,GAAG,OAC3B,IAAY,EACZ,EAAwB,EACxB,OAAO,GAAG,EAAE,GAAG,EAAE;;;;;IAMjB,MAAM,SAAS,GAAGA,SAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACxC,MAAM,KAAK,CAAC,SAAS,CAAC,CAAC;;;;IAIvB,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,SAAS,CAAC,CAAC;IAC9C,MAAM,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;;;;IAI5E,MAAM,eAAe,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;;;;IAIlC,MAAM,mBAAmB,GAAG,CAAC,eAAe;UACxC,CAAC;UACD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;;;;IAIjC,MAAM,SAAS,GAAG;QAChB,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;QAChD,MAAM,SAAS,GAAGA,SAAI,CAAC,SAAS,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC;QACxD,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;QACzD,OAAO,UAAU,CAAC;KACnB,CAAC;;;;IAIF,MAAM,UAAU,GAAG;QACjB,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;QACxC,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAClC,MAAM,SAAS,GAAGA,SAAI,CAAC,SAAS,EAAE,GAAG,cAAc,EAAE,CAAC,CAAC;;;;QAIvD,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACpC,MAAM,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,OAAO,CAAC,GAAG,CACf,cAAc,CAAC,GAAG,CAChB,OAAO,KAAK,KAAK,MAAM,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAC1C,CACF,CAAC;SACH;;;;QAID,MAAM,UAAU,GAAG,MAAM,EAAE,EAAE,CAAC;QAC9B,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC9C,MAAM,SAAS,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QACvC,OAAO,UAAU,CAAC;KACnB,CAAC;;;;IAIF,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QAClB,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAChC,OAAO,MAAM,UAAU,EAAE,CAAC;KAC3B;;;;IAID,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,mBAAmB,IAAI,IAAI,CAAC;IAC7D,MAAM,YAAY,GAAG,UAAU,IAAI,OAAO,CAAC;IAC3C,OAAO,CAAC,GAAG,CAAC,2BAA2B,IAAI,EAAE,EAAE,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC,CAAC;;;;IAI7E,IAAI,YAAY,EAAE;QAChB,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAC/B,OAAO,MAAM,UAAU,EAAE,CAAC;KAC3B;SAAM;QACL,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACnC,OAAO,MAAM,SAAS,EAAE,CAAC;KAC1B;AACH;;;;"}