{"version":3,"file":"rn-disk-cache.development.cjs","sources":["../src/CacheStore.ts","../src/index.ts"],"sourcesContent":["/**\n * @fileoverview\n * This file uses a class, which is a highly unpopular pattern nowadays, but was\n * necessary to avoid argument juggling between functions, and overall easier\n * state management.\n */\n\nimport { join } from 'path';\nimport fs from 'react-native-fs';\n\nconst {\n  DocumentDirectoryPath,\n  mkdir,\n  readDir,\n  readFile,\n  unlink,\n  writeFile,\n} = fs;\n\n/**\n * The directory where caches will be stored.\n */\nconst CACHE_DIR = join(DocumentDirectoryPath, '__caches__');\n\nexport class CacheStore<T> {\n  /**\n   * The path to this cache at ${CACHE_DIR}/{name}.\n   */\n  private cachePath: string;\n  /**\n   * Set the cache directory for this store.\n   */\n  constructor(\n    private name: string,\n    private maxAge: number,\n    private silent = false\n  ) {\n    this.cachePath = join(CACHE_DIR, this.name);\n  }\n  /**\n   * Try to read a non-stale cache, and if one doesn't exist, load a new one,\n   * cache it, and return it.\n   */\n   public async refresh(\n    fn: (...args: any[]) => T | Promise<T>,\n    ...args: any[]\n  ) {\n    /**\n     * The time the function started executing.\n     */\n    const startTime = Date.now();\n    try {\n      const nonStaleCache = await this.read();\n      if (nonStaleCache) {\n        const { value } = nonStaleCache;\n        return value;\n      } else {\n        const { value } = await this.write(await fn(...args));\n        return value;\n      }\n    } catch (error) {\n      this.log(\n        `Unrecoverable error. Files may be corrupted. Deleting all caches.`,\n        error\n      );\n      await this.clean(true);\n      throw new Error(`Error: ${error}`);\n    } finally {\n      this.log(`Finished in ${Date.now() - startTime}ms`);\n    }\n  }\n  /**\n   * Log messages and include the name of the cache.\n   */\n   private log(...msgs: any[]) {\n    if (!this.silent) {\n      console.log(`CACHE [${this.name}]`, ...msgs);\n    }\n  }\n  /**\n   * Ensure the cachePath exists, read any caches inside of it, and store it on\n   * `this.caches`.\n   */\n  private async update() {\n    /**\n     * Make sure this cache directory exists.\n     */\n    await mkdir(this.cachePath);\n    /**\n     * Find available caches and sort them by increasing age.\n     */\n    const cachesInDir = await readDir(this.cachePath);\n    const sortedCaches = cachesInDir.sort(\n      (a, b) => Number(b.name) - Number(a.name)\n    );\n\n    return sortedCaches;\n  }\n  /**\n   * Delete all caches except the most recent, unless `all: true` is\n   * specified, in which case all caches will be deleted.\n   */\n  private async clean(all: boolean) {\n    this.log(`Deleting ${all ? 'all' : 'old'} caches.`);\n\n    const caches = await this.update();\n    const cachesToDelete = all ? caches : caches.slice(1);\n    await Promise.all(\n      cachesToDelete.map(\n        async (cache) => await unlink(cache.path)\n      )\n    );\n  }\n  /**\n   * Try to read a non-stale cache value. If one is not found, return `null`.\n   */\n  private async read() {\n    this.log('Reading most recent cache value.');\n    const caches = await this.update();\n    const mostRecentCache = caches[0];\n\n    if (!mostRecentCache) {\n      this.log('No caches found.');\n      return null;\n    }\n\n    const mostRecentCacheTimestamp = Number(mostRecentCache.name);\n    const mostRecentCacheAge = (Date.now() - mostRecentCacheTimestamp) / 1000;\n    const mostRecentCacheIsStale = mostRecentCacheAge >= this.maxAge;\n\n    this.log(`Cache found. Age: ${mostRecentCacheAge}s`);\n\n    if (mostRecentCacheIsStale) {\n      this.log('Cache is stale.');\n      return null;\n    } else {\n      this.log('Cache is not stale.');\n      const fileContents = await readFile(mostRecentCache.path);\n      const value: T = JSON.parse(fileContents);\n      /**\n       * Return as an object to prevent issues if the cached value happened to be\n       * `null`.\n       */\n      return { value };\n    }\n  };\n  /**\n   * Write the new value to the cache.\n   */\n  private async write(value: T) {\n    this.log('Writing new cache value.');\n    const file = join(this.cachePath, `${Date.now()}`);\n    /**\n     * Delete all except the most recent cache.\n     */\n    await this.clean(false);\n    /**\n     * Write new cache and return.\n     */\n    const serialized = JSON.stringify(value);\n    await writeFile(file, serialized);\n\n    return { value };\n  };\n}","import { CacheStore } from './CacheStore';\n\ninterface FromDiskCacheArgs<T>{\n  name: string;\n  refresh: (...args: any[]) => T | Promise<T>;\n  maxAge?: number;\n  silent?: boolean;\n}\n\n/**\n * Cache an object on the filesystem, given a `name`, `refresh` (can be async),\n * and `maxAge` (defaults to 1hr).\n *\n * Pass `silent: true` to disable logs.\n */\nexport const fromDiskCache = async <T>(\n  {\n    name,\n    refresh,\n    maxAge = 60 * 60,\n    silent = false,\n  }: FromDiskCacheArgs<T>,\n  ...args: any[]\n): Promise<T> => {\n  /**\n   * Initialize a reference to this cache store.\n   */\n  const cacheStore = new CacheStore<T>(name, maxAge, silent);\n  /**\n   * Read a cached version of the value, or write a new one if it doesn't exist\n   * and return that.\n   */\n  try {\n    return await cacheStore.refresh(refresh, ...args);\n  } catch (error) {\n    throw new Error(`Error refreshing cache: ${error}`);\n  }\n};"],"names":["fs","join"],"mappings":"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"}