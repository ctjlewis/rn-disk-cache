"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("path");function t(e){return e&&"object"==typeof e&&"default"in e?e:{"default":e}}var a=t(require("react-native-fs"));const{DocumentDirectoryPath:i,mkdir:r,readDir:s,readFile:n,unlink:c,writeFile:o}=a.default,h=e.join(i,"__caches__");class l{name;maxAge;silent;cachePath;constructor(t,a,i=!1){this.name=t,this.maxAge=a,this.silent=i,this.cachePath=e.join(h,this.name)}async refresh(e,...t){const a=Date.now();try{const i=await this.read();if(i){const{value:e}=i;return e}{const{value:a}=await this.write(await e(...t));return a}}catch(e){throw this.log("Unrecoverable error. Files may be corrupted. Deleting all caches.",e),await this.clean(!0),new Error(`Error: ${e}`)}finally{this.log(`Finished in ${Date.now()-a}ms`)}}log(...e){this.silent||console.log(`CACHE [${this.name}]`,...e)}async update(){return await r(this.cachePath),(await s(this.cachePath)).sort(((e,t)=>Number(t.name)-Number(e.name)))}async clean(e){this.log(`Deleting ${e?"all":"old"} caches.`);const t=await this.update(),a=e?t:t.slice(1);await Promise.all(a.map((async e=>await c(e.path))))}async read(){this.log("Reading most recent cache value.");const e=(await this.update())[0];if(!e)return this.log("No caches found."),null;const t=Number(e.name),a=(Date.now()-t)/1e3,i=a>=this.maxAge;if(this.log(`Cache found. Age: ${a}s`),i)return this.log("Cache is stale."),null;{this.log("Cache is not stale.");const t=await n(e.path);return{value:JSON.parse(t)}}}async write(t){this.log("Writing new cache value.");const a=e.join(this.cachePath,`${Date.now()}`);await this.clean(!1);const i=JSON.stringify(t);return await o(a,i),{value:t}}}exports.fromDiskCache=async({name:e,refresh:t,maxAge:a=3600,silent:i=!1},...r)=>{const s=new l(e,a,i);try{return await s.refresh(t,...r)}catch(e){throw new Error(`Error refreshing cache: ${e}`)}};
//# sourceMappingURL=rn-disk-cache.production.min.cjs.map
