"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("path");function a(e){return e&&"object"==typeof e&&"default"in e?e:{"default":e}}var t=a(require("react-native-fs"));const{DocumentDirectoryPath:o,mkdir:n,readDir:c,readFile:s,unlink:i,writeFile:r}=t.default,l=e.join(o,"__caches__");exports.fromDiskCache=async(a,t,o=3600)=>{const u=e.join(l,a);await n(u);const h=(await c(u)).sort(((e,a)=>Number(a.name)-Number(e.name))),d=h[0],f=d?Number(d.name):0,w=async()=>{console.log("Writing new cache value.");const a=await t(),o=Date.now(),n=e.join(u,`${o}`),c=JSON.stringify(a);if(h.length>1){console.log("Deleting old caches.");const e=h.slice(1);await Promise.all(e.map((async e=>await i(e.path))))}return await r(n,c),a};if(!h.length)return console.log("No caches found."),await w();const g=(Date.now()-f)/1e3,m=g>=o;return console.log(`Caches found for store: ${a}`,{cacheIsStale:m,secondsOld:g}),m?(console.log("Cache is stale."),await w()):(console.log("Cache is not stale."),await(async()=>{console.log("Reading most recent cache value.");const a=e.join(u,d.name);return JSON.parse(await s(a))})())};
//# sourceMappingURL=rn-disk-cache.production.min.cjs.map
