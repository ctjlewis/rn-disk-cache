"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("path");function a(e){return e&&"object"==typeof e&&"default"in e?e:{"default":e}}var t=a(require("react-native-fs"));const{DocumentDirectoryPath:c,mkdir:s,readDir:n,readFile:o,unlink:i,writeFile:r}=t.default,l=e.join(c,"__caches__");class h{name;cachePath;constructor(a){this.name=a,this.cachePath=e.join(l,this.name)}getCaches=async()=>(await s(this.cachePath),(await n(this.cachePath)).sort(((e,a)=>Number(a.name)-Number(e.name))));getMostRecentCache=async()=>(await this.getCaches())[0];read=async()=>{console.log("Reading most recent cache value.");const e=await this.getMostRecentCache(),a=await o(e.name);return JSON.parse(a)};write=async a=>{console.log("Writing new cache value.");const t=e.join(this.cachePath,`${Date.now()}`);await this.deleteCaches(!1);const c=JSON.stringify(a);return await r(t,c),a};deleteCaches=async e=>{console.log(`Deleting ${e?"all":"old"} caches.`);const a=await this.getCaches(),t=e?a:a.slice(1);await Promise.all(t.map((async e=>await i(e.path))))}}exports.fromDiskCache=async(e,a,t=3600,...c)=>{const s=Date.now(),n=new h(e),o=async()=>{const e=await a(...c);return await n.write(e)};try{const a=await n.getMostRecentCache(),c=a?Number(a.name):0;if(!a)return console.log("No caches found."),await o();const i=(Date.now()-c)/1e3,r=i>=t;return console.log(`Caches found for store: ${e}`,{cacheIsStale:r,secondsOld:i}),r?(console.log("Cache is stale."),await o()):(console.log("Cache is not stale."),await n.read())}catch(e){throw console.log("Unrecoverable error. Files may be corrupted. Deleting all caches."),await n.deleteCaches(!0),new Error(`Error: ${e}`)}finally{console.log(`Finished in ${Date.now()-s}ms`)}};
//# sourceMappingURL=rn-disk-cache.production.min.cjs.map
