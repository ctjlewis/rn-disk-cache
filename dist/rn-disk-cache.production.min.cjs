"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("path");function e(t){return t&&"object"==typeof t&&"default"in t?t:{"default":t}}var a=e(require("react-native-fs"));const{DocumentDirectoryPath:i,mkdir:n,readDir:c,readFile:s,unlink:r,writeFile:l}=a.default,o=t.join(i,"__caches__");class h{name;maxAge;silent;cachePath;lockFile;constructor(e,a,i=!1){this.name=e,this.maxAge=a,this.silent=i,this.cachePath=t.join(o,this.name),this.lockFile=t.join(this.cachePath,".lock")}log(...t){this.silent||console.log(`CACHE [${this.name}]`,...t)}async lock(){return this.log("Locking cache store."),await a.default.writeFile(this.lockFile,"")}async unlock(){return this.log("Unlocking cache store."),await a.default.unlink(this.lockFile)}async isLocked(){return await a.default.exists(this.lockFile)}async waitForUnlock(){return this.log("Waiting for unlock..."),await new Promise((t=>{}))}async getCaches(){return await n(this.cachePath),(await c(this.cachePath)).filter((t=>NaN!==Number(t.name))).sort(((t,e)=>Number(e.name)-Number(t.name)))}async getValidCache(){this.log("Reading most recent cache value.");const t=(await this.getCaches())[0];if(!t)return this.log("No caches found."),null;const e=Number(t.name),a=(Date.now()-e)/1e3,i=a>=this.maxAge;return this.log(`Cache found. Age: ${a} sec`),i?null:t}async clean(t){this.log(`Deleting ${t?"all":"old"} caches.`);const e=await this.getCaches(),a=(t?e:e.slice(1))??[];await Promise.all(a.map((async t=>await r(t.path))))}async read(){const t=await this.getValidCache();if(t){this.log("Valid cache found.");const e=await s(t.path);return{value:JSON.parse(e)}}return null}async write(e){const a=await this.read();if(a)return this.log("Valid cache found while trying to write. Using that instead."),a;{await this.waitForUnlock(),this.log("Writing new cache value."),await this.lock(),await this.clean(!1);const a=t.join(this.cachePath,`${Date.now()}`),i=JSON.stringify(e);return await l(a,i),await this.unlock(),{value:e}}}async poll(t,...e){const a=Date.now();try{const i=await this.read();if(i){const{value:t}=i;return t}{const{value:a}=await this.write(await t(...e));return a}}catch(t){throw this.log("Unrecoverable error. Files may be corrupted. Deleting all caches.",t),await this.clean(!0),new Error(`Error: ${t}`)}finally{this.log(`Finished in ${Date.now()-a}ms`)}}}exports.fromDiskCache=async({name:t,poll:e,maxAge:a=3600,silent:i=!1},...n)=>{const c=new h(t,a,i);try{return await c.poll(e,...n)}catch(t){throw new Error(`Error refreshing cache: ${t}`)}};
//# sourceMappingURL=rn-disk-cache.production.min.cjs.map
