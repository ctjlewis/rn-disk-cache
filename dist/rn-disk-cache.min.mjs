import{join as t}from"path";import a from"react-native-fs";const{DocumentDirectoryPath:e,mkdir:s,readDir:i,readFile:r,unlink:n,writeFile:c}=a,h=t(e,"__caches__");class o{name;maxAge;silent;cachePath;constructor(a,e,s=!1){this.name=a,this.maxAge=e,this.silent=s,this.cachePath=t(h,this.name)}async refresh(t,...a){const e=Date.now();try{const s=await this.read();if(s){const{value:t}=s;return t}{const{value:e}=await this.write(await t(...a));return e}}catch(t){throw this.log("Unrecoverable error. Files may be corrupted. Deleting all caches.",t),await this.clean(!0),new Error(`Error: ${t}`)}finally{this.log(`Finished in ${Date.now()-e}ms`)}}log(...t){this.silent||console.log(`CACHE [${this.name}]`,...t)}async update(){return await s(this.cachePath),(await i(this.cachePath)).sort(((t,a)=>Number(a.name)-Number(t.name)))}async clean(t){this.log(`Deleting ${t?"all":"old"} caches.`);const a=await this.update(),e=t?a:a.slice(1);await Promise.all(e.map((async t=>await n(t.path))))}async read(){this.log("Reading most recent cache value.");const t=(await this.update())[0];if(!t)return this.log("No caches found."),null;const a=Number(t.name),e=(Date.now()-a)/1e3,s=e>=this.maxAge;if(this.log(`Cache found. Age: ${e}s`),s)return this.log("Cache is stale."),null;{this.log("Cache is not stale.");const a=await r(t.path);return{value:JSON.parse(a)}}}async write(a){this.log("Writing new cache value.");const e=t(this.cachePath,`${Date.now()}`);await this.clean(!1);const s=JSON.stringify(a);return await c(e,s),{value:a}}}const l=async({name:t,refresh:a,maxAge:e=3600,silent:s=!1},...i)=>{const r=new o(t,e,s);try{return await r.refresh(a,...i)}catch(t){throw new Error(`Error refreshing cache: ${t}`)}};export{l as fromDiskCache};
export default {};
//# sourceMappingURL=rn-disk-cache.min.mjs.map
