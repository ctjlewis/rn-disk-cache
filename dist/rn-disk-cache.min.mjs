import{join as a}from"path";import e from"react-native-fs";const{DocumentDirectoryPath:t,mkdir:c,readDir:s,readFile:i,unlink:n,writeFile:r}=e,o=a(t,"__caches__");class h{name;cachePath;constructor(e){this.name=e,this.cachePath=a(o,this.name)}getCaches=async()=>(await c(this.cachePath),(await s(this.cachePath)).sort(((a,e)=>Number(e.name)-Number(a.name))));log(...a){return console.log(`CACHE [${this.name}]`,...a),this}getMostRecentCache=async()=>(await this.getCaches())[0];read=async()=>{this.log("Reading most recent cache value.");try{const a=await this.getMostRecentCache();this.log(a.path);const e=await i(a.path);return JSON.parse(e)}catch(a){this.log("Error reading file",a)}};write=async e=>{this.log("Writing new cache value.");const t=a(this.cachePath,`${Date.now()}`);await this.deleteCaches(!1);const c=JSON.stringify(e);return await r(t,c),e};deleteCaches=async a=>{this.log(`Deleting ${a?"all":"old"} caches.`);const e=await this.getCaches(),t=a?e:e.slice(1);await Promise.all(t.map((async a=>await n(a.path))))}}const l=async(a,e,t=3600,...c)=>{const s=Date.now(),i=new h(a),n=async()=>{const a=await e(...c);return await i.write(a)};try{const e=await i.getMostRecentCache(),c=e?Number(e.name):0;if(!e)return i.log("No caches found."),await n();const r=(Date.now()-c)/1e3,o=r>=t;return i.log(`Caches found for store: ${a}`,{cacheIsStale:o,secondsOld:r}),o?(i.log("Cache is stale."),await n()):(i.log("Cache is not stale."),await i.read())}catch(a){throw i.log("Unrecoverable error. Files may be corrupted. Deleting all caches.",a),await i.deleteCaches(!0),new Error(`Error: ${a}`)}finally{i.log(`Finished in ${Date.now()-s}ms`)}};export{l as fromDiskCache};
export default {};
//# sourceMappingURL=rn-disk-cache.min.mjs.map
