import{join as t}from"path";import a from"react-native-fs";const{DocumentDirectoryPath:e,mkdir:i,readDir:n,readFile:s,unlink:c,writeFile:r}=a,o=t(e,"__caches__");class l{name;maxAge;silent;cachePath;lockFile;constructor(a,e,i=!1){this.name=a,this.maxAge=e,this.silent=i,this.cachePath=t(o,this.name),this.lockFile=t(this.cachePath,".lock")}log(...t){this.silent||console.log(`CACHE [${this.name}]`,...t)}async lock(){return this.log("Locking cache store."),await a.writeFile(this.lockFile,"")}async unlock(){return this.log("Unlocking cache store."),await a.unlink(this.lockFile)}async isLocked(){return await a.exists(this.lockFile)}async waitForUnlock(){return this.log("Waiting for unlock..."),await new Promise((async t=>{const a=async()=>{await this.isLocked()?setTimeout(a,100*Math.random()):t(!0)};setTimeout((async()=>await this.unlock()),6e4),await a()}))}async getCaches(){return await i(this.cachePath),(await n(this.cachePath)).filter((t=>NaN!==Number(t.name))).sort(((t,a)=>Number(a.name)-Number(t.name)))}async getValidCache(){this.log("Reading most recent cache value.");const t=(await this.getCaches())[0];if(!t)return this.log("No caches found."),null;const a=Number(t.name),e=(Date.now()-a)/1e3,i=e>=this.maxAge;return this.log(`Cache found. Age: ${e} sec`),i?null:t}async clean(t){this.log(`Deleting ${t?"all":"old"} caches.`);const a=await this.getCaches(),e=t?a:a.slice(1);await Promise.all(e.map((async t=>await c(t.path))))}async read(){const t=await this.getValidCache();if(t){this.log("Valid cache found.");const a=await s(t.path);return{value:JSON.parse(a)}}return null}async write(a){const e=await this.read();if(e)return this.log("Valid cache found while trying to write. Using that instead."),e;{await this.waitForUnlock(),this.log("Writing new cache value."),await this.lock(),await this.clean(!1);const e=t(this.cachePath,`${Date.now()}`),i=JSON.stringify(a);return await r(e,i),await this.unlock(),{value:a}}}async poll(t,...a){const e=Date.now();try{const i=await this.read();if(i){const{value:t}=i;return t}{const{value:e}=await this.write(await t(...a));return e}}catch(t){throw this.log("Unrecoverable error. Files may be corrupted. Deleting all caches.",t),await this.clean(!0),new Error(`Error: ${t}`)}finally{this.log(`Finished in ${Date.now()-e}ms`)}}}const h=async({name:t,poll:a,maxAge:e=3600,silent:i=!1},...n)=>{const s=new l(t,e,i);try{return await s.poll(a,...n)}catch(t){throw new Error(`Error refreshing cache: ${t}`)}};export{h as fromDiskCache};
export default {};
//# sourceMappingURL=rn-disk-cache.min.mjs.map
