import{join as e}from"path";import a from"react-native-fs";const{DocumentDirectoryPath:t,mkdir:c,readDir:s,readFile:o,unlink:n,writeFile:i}=a,r=e(t,"__caches__");class h{name;cachePath;constructor(a){this.name=a,this.cachePath=e(r,this.name)}getCaches=async()=>(await c(this.cachePath),(await s(this.cachePath)).sort(((e,a)=>Number(a.name)-Number(e.name))));getMostRecentCache=async()=>(await this.getCaches())[0];read=async()=>{console.log("Reading most recent cache value.");const e=await this.getMostRecentCache(),a=await o(e.name);return JSON.parse(a)};write=async a=>{console.log("Writing new cache value.");const t=e(this.cachePath,`${Date.now()}`);await this.deleteCaches(!1);const c=JSON.stringify(a);return await i(t,c),a};deleteCaches=async e=>{console.log(`Deleting ${e?"all":"old"} caches.`);const a=await this.getCaches(),t=e?a:a.slice(1);await Promise.all(t.map((async e=>await n(e.path))))}}const l=async(e,a,t=3600,...c)=>{const s=Date.now(),o=new h(e),n=async()=>{const e=await a(...c);return await o.write(e)};try{const a=await o.getMostRecentCache(),c=a?Number(a.name):0;if(!a)return console.log("No caches found."),await n();const i=(Date.now()-c)/1e3,r=i>=t;return console.log(`Caches found for store: ${e}`,{cacheIsStale:r,secondsOld:i}),r?(console.log("Cache is stale."),await n()):(console.log("Cache is not stale."),await o.read())}catch(e){throw console.log("Unrecoverable error. Files may be corrupted. Deleting all caches."),await o.deleteCaches(!0),new Error(`Error: ${e}`)}finally{console.log(`Finished in ${Date.now()-s}ms`)}};export{l as fromDiskCache};
export default {};
//# sourceMappingURL=rn-disk-cache.min.mjs.map
